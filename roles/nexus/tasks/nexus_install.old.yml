---
- name: Set detection method to fixed if we have a var
  set_fact:
    nexus_version_detected_from: fixed
  when: nexus_version | length > 0

- name: "Check nexus-latest link stat in {{ nexus_installation_dir }}"
  stat:
    path: "{{ nexus_installation_dir }}/nexus-latest"
  register: nexus_latest_link
  check_mode: no

- name: Register current running version if any
  set_fact:
    nexus_version_running: >-
      {{
        nexus_latest_link.stat.lnk_target
        | regex_replace('^.*/nexus-(\d*\.\d*\.\d*-\d*)', '\1')
      }}
  when:
    - nexus_latest_link.stat.exists | default(false)
    - nexus_latest_link.stat.islnk | default(false)

- name: No version given => Version detection
  block:

    - name: Register nexus_version from currently installed
      # Note: setting nexus_version here skips the next block task.
      set_fact:
        nexus_version: "{{ nexus_version_running }}"
        nexus_version_detected_from: installed
      when:
        - nexus_version_running is defined
        - not (nexus_upgrade | default(false) | bool)

    - name: Call latest nexus uri to get redirection
      uri:
        url: "{{ nexus_download_url }}/latest-unix.tar.gz"
        method: CONNECT
        status_code: 302
      register: nexus_latest_uri_call
      # No changes made, we only need the target uri. Safe for check mode and needed for next operations
      check_mode: no

    - name: Register nexus_version from latest nexus uri redirection
      set_fact:
        nexus_version: >-
          {{
            nexus_latest_uri_call.location
            | regex_replace("^https://.*nexus-(\d*\.\d*\.\d*-\d*)-unix.tar.gz", "\1")
          }}
        nexus_version_detected_from: latest

  when: nexus_version | length == 0

- name: Print info about detected version to use
  vars:
    version_info: |-
      Used version: {{ nexus_version }}
      Version detected from: {{ nexus_version_detected_from }}
      Upgrade allowed: {{ nexus_upgrade | default(false) | bool }}
      Current running version: {{ nexus_version_running | default('none') }}
  debug:
    msg: "{{ version_info.split('\n') }}"

- name: Register nexus package name
  set_fact:
    nexus_package: "nexus-{{ nexus_version }}-unix.tar.gz"

- name: Template a file to /etc/files.conf
  template:
    src: nexus
    dest: /etc/init.d
    owner: root
    group: root
    mode: '0755'

- name: Download nexus_package
  get_url:
    url: "{{ nexus_download_url }}/{{ nexus_package }}"
    dest: "{{ nexus_download_dir }}/{{ nexus_package }}"
    force: no

- name: Ensure Nexus o/s group exists
  group:
    name: "{{ nexus_os_group }}"
    state: present

- name: Ensure Nexus o/s user exists
  user:
    name: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    home: "{{ nexus_os_user_home_dir }}"
    shell: "/bin/bash"
    state: present

- name: Ensure Nexus installation directory exists
  file:
    path: "{{ nexus_installation_dir }}"
    state: "directory"

- name: Unpack Nexus download
  unarchive:
    src: "{{ nexus_download_dir }}/{{ nexus_package }}"
    dest: "{{ nexus_installation_dir }}"
    creates: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
    force: no
    copy: false

- name: Ensure proper ownership of nexus installation directory
  file:
    dest: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
    owner: nexus
    group: nexus
    recurse: yes
    mode: "u=rwX,g=rX,o=rX"

- name: Ensure proper ownership of nexus installation directory
  file:
    dest: "{{ nexus_installation_dir }}/sonatype-work"
    owner: nexus
    group: nexus
    recurse: yes
    mode: "u=rwX,g=rX,o=rX"

- name: Update symlink nexus-latest
  file:
    path: "{{ nexus_installation_dir }}/nexus-latest"
    src: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    state: link
    follow: false
  register: nexus_latest_version

- name: Update symlink nexus
  file:
    path: "/usr/bin/nexus"
    src: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}/bin/nexus"
    state: link
    follow: false


- meta: flush_handlers

- name: Delete unpacked data directory
  file:
    path: "{{ nexus_installation_dir }}/nexus-latest/data"
    state: absent

- name: Get path to default settings
  set_fact:
    nexus_default_settings_file: "{{ nexus_installation_dir }}/nexus-latest/etc/org.sonatype.nexus.cfg"
  when: nexus_version is version_compare('3.1.0', '<')

- name: Get path to default settings
  set_fact:
    nexus_default_settings_file: "{{ nexus_installation_dir }}/nexus-latest/etc/nexus-default.properties"
  when: nexus_version is version_compare('3.1.0', '>=')

- name: Get application settings directories
  set_fact:
    nexus_app_dir_settings_dirs:
      - "{{ nexus_installation_dir }}/nexus-latest/etc"
  when: nexus_version is version_compare('3.1.0', '<')

- name: Get application settings directories
  set_fact:
    nexus_app_dir_settings_dirs:
      - "{{ nexus_installation_dir }}/nexus-latest/etc"
      - "{{ nexus_installation_dir }}/nexus-latest/etc/karaf"
      - "{{ nexus_installation_dir }}/nexus-latest/etc/jetty"
      - "{{ nexus_installation_dir }}/nexus-latest/etc/fabric"
      - "{{ nexus_installation_dir }}/nexus-latest/etc/logback"
      - "{{ nexus_installation_dir }}/nexus-latest/etc/scripts"
  when: nexus_version is version_compare('3.1.0', '>=')

- name: Allow nexus to create first-time install configuration files in  {{ nexus_installation_dir }}/nexus-latest/etc
  file:
    path: "{{ item }}"
    state: "directory"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    mode: "0755"
    recurse: false
  with_items: "{{ nexus_app_dir_settings_dirs }}"
  when: nexus_latest_version.changed
  register: chown_config_first_time
  tags:
    # hard to run as a handler for time being
     - skip_ansible_lint

- name: Create Nexus data directory
  file:
    path: "{{ nexus_data_dir }}"
    state: "directory"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"

- name: Setup Nexus data directory
  lineinfile:
    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
    regexp: "^-Dkaraf.data=.*"
    line: "-Dkaraf.data={{ nexus_data_dir }}"

- name: Set NEXUS_HOME for the service user
  lineinfile:
    dest: "{{ nexus_os_user_home_dir }}/.bashrc"
    regexp: "^export NEXUS_HOME=.*"
    line: "export NEXUS_HOME={{ nexus_installation_dir }}/nexus-latest"

- name: Set nexus user
  lineinfile:
    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.rc"
    regexp: ".*run_as_user=.*"
    line: "run_as_user=\"{{ nexus_os_user }}\""

- name: Set nexus port
  lineinfile:
    dest: "{{ nexus_default_settings_file }}"
    regexp: "^application-port=.*"
    line: "application-port={{ nexus_default_port }}"

- name: Set nexus context path
  lineinfile:
    dest: "{{ nexus_default_settings_file }}"
    regexp: "^nexus-context-path=.*"
    line: "nexus-context-path={{ nexus_default_context_path }}"

- name: Install Java version 8
  shell: yum install java -y
...

